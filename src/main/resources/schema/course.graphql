scalar Url
scalar Date
scalar NonNegativeInt
scalar DateTime

union SmartSearchResult = Hello | Book

type Query {
    allHellos: [Hello]
    oneHello: Hello
    books(author: String): [Book]
    booksByReleased(releasedInput: ReleaseHistoryInput!): [Book]
    pets(petFilter: PetFilter): [Pet]
    smartSearch(keyword: String): [SmartSearchResult]
    additionalOnRequest: String
    monTest(input: String!): String
    monAutreTest(uneVariable: ReleaseHistoryInput!): String
}

type Mutation {
    addHello(helloInput: HelloInput!): Int
    replaceHelloText(helloInput: HelloInput!): [Hello]
    deleteHello(number: Int!): Int
#     userCreate(user: UserCreateInput!): UserResponse!
#     userLogin(user: UserLoginInput!): UserResponse!
#     userActivation(user: UserActivationInput!): UserActivationResponse!
#     problemCreate(problem: ProblemCreateInput!): ProblemResponse!
#     solutionCreate(solution: SolutionCreateInput!): SolutionResponse!
#     solutionVote(vote: SolutionVoteInput!): SolutionResponse!
}

type Subscription {
    randomStock: Stock
    # problemAdded: Problem!
    # solutionVoteChanged(solutionId: ID!): Solution!
}